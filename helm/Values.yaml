clientCertificate: "arn:aws:iam::512686554592:server-certificate/cloudfront/wildcard.elifesciences.org/2019.wildcard.elifesciences.org"
airflow:
  service:
    type: "LoadBalancer"
    websitePrefix: libero-datahub-pipeline
    websiteDomain: elifesciences.org
  image:
    ## docker-airflow image with dask executor
    repository: owonibi/airflow_dask_executor
    ## image tag
    tag: latest
    ## Image pull policy
    ## values: Always or IfNotPresent
    pullPolicy: IfNotPresent
    ## image pull secret for private images
    pullSecret:
  ## Set schedulerNumRuns to control how the scheduler behaves:
  ##   -1 will let him looping indefinitively but it will never update the DAG
  ##   1 will have the scheduler quit after each refresh, but kubernetes will restart it.
  ## A long running scheduler process, ends up not scheduling some tasks. We still donâ€™t know the exact cause,
  ## unfortunately. Airflow has a built-in workaround in the form of the `num_runs` flag.
  schedulerNumRuns: "-1"
  ## Number of replicas for web server.
  webReplicas: 1
  ## Custom  environment variables
  ## Use this to add environment variables to the container (including airflow variables to be overriden)
  customEnvironmentVariables:
    CROSSREF_CONFIG_S3_BUCKET: ci-elife-data-pipeline
    CROSSREF_CONFIG_S3_OBJECT_KEY: "airflow_test/crossref_event/elife-data-pipeline.config.yaml"
    DEFAULT_CROSS_REF_IMPORT_SCHEDULE_INTERVAL: "@daily"

  ## Secrets which will be mounted as a file at `secretsDir/<secret name>`.
  secrets:
    - name: aws
      secretsDir: /var/airflow/.aws
    - name: gcp
      secretsDir: /var/airflow/.gcp

  ##
  ## Configure pod disruption budget for the scheduler
  podDisruptionBudget:
    maxUnavailable: 1

  ## Run initdb when the scheduler starts.
  initdb: true

web:
  resources: {}
    # limits:
    #   cpu: "300m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "100m"
    #   memory: "512Mi"
  initialStartupDelay: "60"
  initialDelaySeconds: "360"


websiteAuthentication:
  enabled: true
  googleOAuthClientID: "" # create from google
  googleOAuthClientSecret: "" #create from google
  googleOAuthCallbackRoute: "/oauth2callback"
  googleOAuthAuthenticatedDomain: "elifesciences.org"
  googleOAuthCallbackRouteJupyter: "hub/oauth_callback"

scheduler:
  resources: {}
    # limits:
    #   cpu: "1000m"
    #   memory: "1Gi"
    # requests:
    #   cpu: "500m"
    #   memory: "512Mi"

##
## Configure logs
logs:
  path: /usr/local/airflow/logs

##
## Configure DAGs deployment and update
dags:
  ##
  ## mount path for persistent volume.
  ## Note that this location is referred to in airflow.cfg, so if you change it, you must update airflow.cfg accordingly.
  path: /usr/local/airflow/dags
  ##
  ## Set to True to prevent pickling DAGs from scheduler to workers
  doNotPickle: false
  ##
  ## Configure Git repository to fetch DAGs
  git:
    ##
    ## url to clone the git repository

    git_urls:
      - url: git@github.com:tayowonibi/myown2.git
        name: myown
        installPriority: 1 #from 0-9
        ## branch name, tag or sha1 to reset to
        ref: master
      - url: git@github.com:tayowonibi/test_proj.git
        name: test_proj
        installPriority: 2
        ## branch name, tag or sha1 to reset to
        ref: master

    ## pre-created secret with key, key.pub and known_hosts file for private repos
    secret: my-git-secret
  initContainer:
    ## Fetch the source code when the pods starts
    enabled: true
    ## Image for the init container (any image with git will do)
    image:
      ## docker-airflow image
      repository: alpine/git
      ## image tag
      tag: 1.0.7
      ## Image pull policy
      ## values: Always or IfNotPresent
      pullPolicy: IfNotPresent
    ## install requirements.txt dependencies automatically
    installRequirements: true

dask:
  scheduler:
    name: scheduler
    replicas: 1
    # serviceType: "ClusterIP"
    # serviceType: "NodePort"
    serviceType: "LoadBalancer"
    servicePort: 8786
    resources: {}
    #  limits:
    #    cpu: 1.8
    #    memory: 6G
    #  requests:
    #    cpu: 1.8
    #    memory: 6G

  webUI:
    name: webui
    servicePort: 80

  worker:
    name: worker
    replicas: 1
    default_resources:  # overwritten by resource limits if they exist
      cpu: 1
      memory: "2GiB"
    resources: {}
    #  limits:
    #    cpu: 1
    #    memory: 3G
    #    nvidia.com/gpu: 1
    #  requests:
    #    cpu: 1
    #    memory: 3G
    #    nvidia.com/gpu: 1

##
## Configuration values for the postgresql dependency.
postgresql:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true
  ##
  ## The name of an existing secret that contains the postgres password.
  existingSecret: airflow-postgres
  ## Name of the key containing the secret.
  existingSecretKey: postgres-password
  ##
  service:
    port: 5432
  ## PostgreSQL User to create.
  postgresUser: postgres
  ##
  ## PostgreSQL Database to create.
  postgresDatabase: airflow
  ##
  ## Persistent Volume Storage configuration.
  persistence:
    ##
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    enabled: true
    ##
    ## Persistant class
    # storageClass: classname
    ##
    ## Access mode:
    accessMode: ReadWriteOnce
